from reports import *
from report import Report
from report_repository import ReportRepository
from db2_query import DB2_Query
from config_options import Options
from alert import CoursysAlertTable

import argparse
import string

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Run all of the reports.')
    parser.add_argument( '--key', dest='deobfuscation_key', default=False, 
        help='A key to de-obfuscate args provided by config_options.py')
    
    parser.add_argument( '--options', dest='options_file', default='options.json', 
        help='The location of the file containing options defined for the app.') 

    parser.add_argument( '--output', dest='output', default='',
        help='The location of any files generated by the app.' )
    
    parser.add_argument( '--list', dest='list_all', action='store_true', default=False,
        help='List all reports.' )

    parser.add_argument( '--report', dest='report', default='',
        help='Just run this report.' )

    parser.add_argument( '--query', dest='query', default='',
        help="Direct DB2 Query" )
    
    parser.add_argument( '--cull', dest='cull', default='',
        help="Cull reports older than N days" )
    
    args = parser.parse_args()

    defaults = {
        'verbose':True
    }

    options = Options(args.options_file, args.deobfuscation_key, defaults)
    
    reports = [
        ImmediateRetakeReport(),
        DBInfoReport(),
        FasStudentReport(),
        LowGpaReport(),
        BadFirstSemesterReport(),
        INSYJMAReport(),
        GraduatedCMPTReport(),
        GISMAJReport(),
        NationalityReport(),
        VaughanReport(),
        JointMajorCMPTBusinessReport(),
        CourseOfferingReport(),
        EnrollmentProblemReport(),
        ShadowStudentsReport()
        ]

    
    DB2_Query.connect( options )
    CoursysAlertTable.connect( options )
    
    report_repository = ReportRepository(args.output) 

    # List all reports
    if args.list_all:
        for report in reports:
            print report.title
        exit(0)

    # Run a single query
    if args.query != '':
        print "Query: " + args.query
        q = DB2_Query()
        q.query = string.Template( args.query )
        print q.result()
        exit(0)
    
    # Cull old reports
    if args.cull != '':
        report_repository.cull_old_reports( int(args.cull) )
        exit(0)
    
    # Run an individual report
    if args.report != '':
        print "Report: " + args.report
        reports = filter( lambda report: report.title == args.report, reports)
        if len(reports) == 0:
            print "<not found>"
        for report in reports:
            report.run()
            report_repository.add_report( report )
    else:
        # Run all reports
        for report in reports:
            if report.should_run_today():
                report.run()
                report_repository.add_report( report )


    report_repository.render_index()
    report_repository.save() 

    # Delete expired cached queries
    DB2_Query.clear_expired_members_from_cache()

