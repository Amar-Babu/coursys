# Names of nodes to start
CELERYD_NODES="worker fastworker photo sims"

# the celery app to work with
CELERY_APP="courses.celery"

# Absolute or relative path to the 'celery' command:
CELERY_BIN="python /home/coursys/courses/manage.py celery"

# settings for django integration
CELERY_LOADER="django"
DJANGO_SETTINGS_MODULE="courses.settings"

# Where to chdir at start.
CELERYD_CHDIR="/home/coursys/courses"

# Extra command-line arguments to the worker
BEAT_OPTS="-B:worker --schedule=/var/run/celery/celerybeat.schedule" # options for celerybeat
WORKER_OPTS="-Q:fastworker fast -Q:photo photo -Q:sims sims -Q:worker batch,email,fast -E"
CONCURRENCY_OPTS="-c 2 -c:photo 5 -c:sims 2"
CELERYD_OPTS="$BEAT_OPTS $WORKER_OPTS $CONCURRENCY_OPTS" # actual command line options
CELERYD_LOG_LEVEL="INFO"

CELERYD_MAX_TASKS_PER_CHILD=100
CELERYD_TASK_TIME_LIMIT=300

# %N will be replaced with the first part of the nodename.
CELERYD_LOG_FILE="/var/log/celery/%N.log"
CELERYD_PID_FILE="/var/run/celery/%N.pid"

# Workers should run as an unprivileged user.
#   You need to create this user manually (or you can choose
#   a user/group combination that already exists, e.g. nobody).
CELERYD_USER="coursys"
CELERYD_GROUP="coursys"

# If enabled pid and log directories will be created if missing,
# and owned by the userid/group configured.
CELERY_CREATE_DIRS=1

LD_LIBRARY_PATH=/home/coursys/sqllib/lib64
export LD_LIBRARY_PATH
LANG="en_CA.UTF-8" # DB2 doesn't return UTF-8 strings otherwise
export LANG
