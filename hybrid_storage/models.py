from __future__ import unicode_literals
from django.db import models
import uuid
import os.path
import datetime
from six import text_type

# from stdlib uuid.py
import random
def _random_getnode():
    """Get a random node ID, with eighth bit set as suggested by RFC 4122."""
    return random.randrange(0, 1<<48L) | 0x010000000000L


def generate_file_path(year=None):
    """
    Create a path hierarchy based on a UUID.

    Uses a time-based UUID, but with a randomly generated node value: 60 time-in-nanoseconds bits, 62 random bits (14 bit clock_seq + 48 bit node identifier).
    """
    if not year:
        year = datetime.date.today().year
    year = text_type(year)
    uu = text_type(uuid.uuid1(_random_getnode()))
    return os.path.join(year, uu[0:2], uu[2:])


class FileData(models.Model):
    data = models.BinaryField()


class FileInfo(models.Model):
    filename = models.CharField(max_length=256) # the true filename (like "uploaded.pdf")
    content_hash = models.CharField(max_length=128)
    filedata = models.OneToOneField(FileData, null=True) # reference to the FileData, if it's being stored there
    filepath = models.CharField(max_length=500, null=True) # actual storage location as a file, likely generated by generate_file_path
    size = models.IntegerField()
    created = models.DateTimeField(default=datetime.datetime.now) # used for both created and modified time
    storage_id = models.CharField(max_length=32, null=False, blank=False, db_index=True) # label for the Storage instance that created this: used so HybridStorage.write_to_file can be called on the correct FileInfos

    def save(self, *args, **kwargs):
        if not self.filepath:
            self.filepath = generate_file_path()
        super(FileInfo, self).save(*args, **kwargs)

    def __str__(self):
        return '%i(%s)' % (self.id, self.filename)


class LegacyFileInfo(object):
    # class to mimic FileInfo and let us handle files in a legacy Storage
    def __init__(self, path, storage):
        self.path = path
        self.storage = storage

    def open(self, mode):
        return self.storage.open(name=self.path, mode=mode)

    @property
    def size(self):
        return self.storage.size(name=self.path)


class FileWrite(models.Model):
    fileinfo = models.ForeignKey(FileInfo, null=True)
    location = models.CharField(max_length=30)

    class Meta:
        unique_together = [('fileinfo', 'location')]

    def __str__(self):
        return '%i@%s' % (self.fileinfo_id, self.location)
