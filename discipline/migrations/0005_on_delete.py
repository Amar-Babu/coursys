# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-18 17:09
from __future__ import unicode_literals

import autoslug.fields
import discipline.models
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('discipline', '0004_shorten_indexes'),
    ]

    operations = [
        migrations.AlterField(
            model_name='caseattachment',
            name='attachment',
            field=models.FileField(max_length=500, storage=django.core.files.storage.FileSystemStorage(base_url=None, location='submitted_files'), upload_to=discipline.models._disc_upload_to, verbose_name='File'),
        ),
        migrations.AlterField(
            model_name='caseattachment',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discipline.DisciplineCaseBase'),
        ),
        migrations.AlterField(
            model_name='caseattachment',
            name='name',
            field=models.CharField(blank=True, help_text='Identifying name for the attachment', max_length=150, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='caseattachment',
            name='notes',
            field=models.TextField(blank=True, help_text='Notes about this file (private).', null=True, verbose_name='Notes'),
        ),
        migrations.AlterField(
            model_name='caseattachment',
            name='public',
            field=models.BooleanField(default=True, help_text='Public files will be included in correspondence with student. Private files will be retained as information about the case.', verbose_name='Public?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='contact_date',
            field=models.DateField(blank=True, help_text='Date of initial contact with student regarding the case.', null=True, verbose_name='Initial Contact Date'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='contact_email_text',
            field=models.TextField(blank=True, help_text='The initial email sent to the student regarding the case. Please also note the date of the email. (<a href="javascript:substitution_popup()">Case substitutions</a> allowed.)', null=True, verbose_name='Contact Email Text'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='contacted',
            field=models.CharField(choices=[('NONE', 'Not yet contacted'), ('MAIL', 'Email student through this system'), ('OTHR', 'Instructor will contact student (outside of this system)')], default='NONE', help_text='Has the student been informed of the case?', max_length=4, verbose_name='Student Contacted?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='facts',
            field=models.TextField(blank=True, help_text='Summary of the facts of the case (included in letter, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed).  This should be a summary of the case from the instructor\'s perspective.', null=True, verbose_name='Facts of the Case'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Cluster this case belongs to (if any).', null=True, on_delete=django.db.models.deletion.PROTECT, to='discipline.DisciplineGroup'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='letter_date',
            field=models.DateField(blank=True, help_text="Date instructor's letter was sent to student.", null=True, verbose_name='Letter Date'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='letter_review',
            field=models.BooleanField(default=False, help_text='Has instructor reviewed the letter before sending?', verbose_name='Reviewed?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='letter_sent',
            field=models.CharField(choices=[('WAIT', 'Not yet sent'), ('MAIL', 'Letter emailed through this system'), ('OTHR', 'Instructor will deliver letter (outside of this system)')], default='WAIT', help_text='Has the letter been sent to the student and Chair/Director?', max_length=4, verbose_name='Letter Sent?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='letter_text',
            field=models.TextField(blank=True, null=True, verbose_name='Letter Text'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='meeting_date',
            field=models.DateField(blank=True, help_text='Date of meeting/email with student.', null=True, verbose_name='Meeting/Email Date'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='meeting_notes',
            field=models.TextField(blank=True, help_text='Notes about the meeting/email with student (private notes, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed).', null=True, verbose_name='Meeting/Email Notes'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='meeting_summary',
            field=models.TextField(blank=True, help_text='Summary of the meeting/email with student (included in letter, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed).', null=True, verbose_name='Meeting/Email Summary'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='notes',
            field=models.TextField(blank=True, help_text='Notes about the case (private notes, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed).', null=True, verbose_name='Private Notes'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='notes_public',
            field=models.TextField(blank=True, help_text='Notes about the case (public notes, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed).', null=True, verbose_name='Public Notes'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='coredata.CourseOffering'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='owner',
            field=models.ForeignKey(help_text='The person who created/owns this case.', on_delete=django.db.models.deletion.PROTECT, to='coredata.Person'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='penalty',
            field=models.CharField(choices=[('WAIT', 'penalty not yet assigned'), ('NONE', 'case dropped: no penalty assigned'), ('WARN', 'give the student a written warning'), ('REDO', 'require the student to redo the work, or to do supplementary work'), ('MARK', 'assign a low grade for the work'), ('ZERO', 'assign a grade of “F” or zero for the work')], default='WAIT', help_text='Penalty assigned by the instructor for this case.', max_length=4, verbose_name='Instructor Penalty'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='penalty_implemented',
            field=models.BooleanField(default=False, help_text='Has instructor implemented the assigned penalty?', verbose_name='Penalty Implemented?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='penalty_reason',
            field=models.TextField(blank=True, help_text='Rationale for assigned penalty, or notes/details concerning penalty.  Optional but recommended. (included in letter, <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed)', null=True, verbose_name='Penalty Rationale/Details'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='refer',
            field=models.BooleanField(default=False, help_text='Refer this case to the Chair/Director?', verbose_name='Refer to chair?'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='response',
            field=models.CharField(choices=[('WAIT', 'Waiting for response'), ('NONE', 'No response from student (after a reasonable period of time)'), ('DECL', 'Student declined to meet'), ('MAIL', 'Student sent statement by email'), ('MET', 'Met with student')], default='WAIT', help_text='Has the student responded to the initial contact?', max_length=4, verbose_name='Student Response'),
        ),
        migrations.AlterField(
            model_name='disciplinecasebase',
            name='slug',
            field=autoslug.fields.AutoSlugField(editable=False, populate_from='autoslug', unique_with=('offering',)),
        ),
        migrations.AlterField(
            model_name='disciplinecasechair',
            name='instr_case',
            field=models.ForeignKey(help_text="The instructor's case that triggered this case", on_delete=django.db.models.deletion.PROTECT, to='discipline.DisciplineCaseInstr'),
        ),
        migrations.AlterField(
            model_name='disciplinecasechairnonstudent',
            name='emplid',
            field=models.PositiveIntegerField(blank=True, help_text='SFU student number, if known', null=True, verbose_name='Student Number'),
        ),
        migrations.AlterField(
            model_name='disciplinecasechairnonstudent',
            name='userid',
            field=models.CharField(blank=True, help_text='SFU Unix userid, if known', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='disciplinecasechairstudent',
            name='student',
            field=models.ForeignKey(help_text='The student this case concerns.', on_delete=django.db.models.deletion.PROTECT, to='coredata.Person'),
        ),
        migrations.AlterField(
            model_name='disciplinecaseinstrnonstudent',
            name='emplid',
            field=models.PositiveIntegerField(blank=True, help_text='SFU student number, if known', null=True, verbose_name='Student Number'),
        ),
        migrations.AlterField(
            model_name='disciplinecaseinstrnonstudent',
            name='userid',
            field=models.CharField(blank=True, help_text='SFU Unix userid, if known', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='disciplinecaseinstrstudent',
            name='student',
            field=models.ForeignKey(help_text='The student this case concerns.', on_delete=django.db.models.deletion.PROTECT, to='coredata.Person'),
        ),
        migrations.AlterField(
            model_name='disciplinegroup',
            name='name',
            field=models.CharField(help_text='An arbitrary "name" for this cluster of cases', max_length=60, verbose_name='Cluster Name'),
        ),
        migrations.AlterField(
            model_name='disciplinegroup',
            name='offering',
            field=models.ForeignKey(help_text='The course this cluster is associated with', on_delete=django.db.models.deletion.PROTECT, to='coredata.CourseOffering'),
        ),
        migrations.AlterField(
            model_name='disciplinegroup',
            name='slug',
            field=autoslug.fields.AutoSlugField(editable=False, populate_from='autoslug', unique_with=('offering',)),
        ),
        migrations.AlterField(
            model_name='disciplinetemplate',
            name='field',
            field=models.CharField(choices=[('facts', 'facts of the case'), ('meeting_notes', 'student meeting/email notes'), ('notes', 'private notes'), ('contact_email_text', 'initial contact email'), ('notes_public', 'public notes'), ('meeting_summary', 'student meeting/email summary'), ('response', 'student response details'), ('penalty_reason', 'penalty rationale')], help_text='The field this template applies to', max_length=30, verbose_name='Field'),
        ),
        migrations.AlterField(
            model_name='disciplinetemplate',
            name='label',
            field=models.CharField(help_text='A short label for the menu of templates', max_length=50, verbose_name='Label'),
        ),
        migrations.AlterField(
            model_name='disciplinetemplate',
            name='text',
            field=models.TextField(help_text='The text for the template.  Templates can contain <a href="javascript:textile_popup()">Textile markup</a> and <a href="javascript:substitution_popup()">case substitutions</a> allowed (except the initial contact email) and substitutions described below.', verbose_name='Text'),
        ),
        migrations.AlterField(
            model_name='relatedobject',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='discipline.DisciplineCaseBase'),
        ),
        migrations.AlterField(
            model_name='relatedobject',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType'),
        ),
    ]
