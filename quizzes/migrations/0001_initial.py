# Generated by Django 2.2.11 on 2020-05-07 11:55

import courselib.conditional_save
import courselib.json_fields
import datetime
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import quizzes.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('coredata', '0023_update_choices'),
        ('grades', '0005_on_delete'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('MC', 'Multiple Choice'), ('SHOR', 'Short Answer'), ('LONG', 'Long Answer'), ('FMT', 'Long Answer with formatting'), ('CODE', 'Code Entry with syntax highlighting'), ('NUM', 'Numeric Answer'), ('FILE', 'File Upload')], max_length=4)),
                ('status', models.CharField(choices=[('V', 'Visible'), ('D', 'Deleted')], default='V', max_length=1)),
                ('order', models.PositiveSmallIntegerField()),
                ('config', courselib.json_fields.JSONField(default=dict)),
            ],
            options={
                'ordering': ['order'],
            },
            bases=(models.Model, courselib.conditional_save.ConditionalSaveMixin),
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(help_text='Quiz will be visible to students after this time. Time format: HH:MM:SS, 24-hour time')),
                ('end', models.DateTimeField(help_text='Quiz will be invisible to students and unsubmittable after this time. Time format: HH:MM:SS, 24-hour time')),
                ('status', models.CharField(choices=[('V', 'Visible'), ('D', 'Deleted')], default='V', max_length=1)),
                ('config', courselib.json_fields.JSONField(default=dict)),
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='grades.Activity')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('ip_address', models.GenericIPAddressField()),
                ('capture', models.FileField(blank=True, max_length=500, null=True, storage=django.core.files.storage.FileSystemStorage(base_url=None, file_permissions_mode=420, location='submitted_files'), upload_to=quizzes.models.capture_upload_to)),
                ('config', courselib.json_fields.JSONField(default=dict)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quizzes.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='coredata.Member')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('V', 'Visible'), ('D', 'Deleted')], default='V', max_length=1)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('config', courselib.json_fields.JSONField(default=dict)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='versions', to='quizzes.Question')),
            ],
            options={
                'ordering': ['question', 'created_at', 'id'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quizzes.Quiz'),
        ),
        migrations.CreateModel(
            name='TimeSpecialCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(help_text='Quiz will be visible to the student after this time. Time format: HH:MM:SS, 24-hour time')),
                ('end', models.DateTimeField(help_text='Quiz will be invisible to the student and unsubmittable after this time. Time format: HH:MM:SS, 24-hour time')),
                ('config', courselib.json_fields.JSONField(default=dict)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quizzes.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='coredata.Member')),
            ],
            options={
                'unique_together': {('quiz', 'student')},
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified_at', models.DateTimeField(default=datetime.datetime.now)),
                ('answer', courselib.json_fields.JSONField(default=dict)),
                ('file', models.FileField(blank=True, max_length=500, null=True, storage=django.core.files.storage.FileSystemStorage(base_url=None, file_permissions_mode=420, location='submitted_files'), upload_to=quizzes.models.file_upload_to)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quizzes.Question')),
                ('question_version', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quizzes.QuestionVersion')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='coredata.Member')),
            ],
            options={
                'unique_together': {('question_version', 'student')},
            },
        ),
    ]
